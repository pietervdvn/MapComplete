[
  {
    "path": [],
    "required": false,
    "hints": {},
    "type": "object",
    "description": "A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.\nIf the desired tags are missing and a question is defined, a question will be shown instead."
  },
  {
    "path": [
      "mappings"
    ],
    "required": false,
    "hints": {
      "question": "What are common options?"
    },
    "type": "array",
    "description": "Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"
  },
  {
    "path": [
      "mappings",
      "if"
    ],
    "required": true,
    "hints": {
      "typehint": "tag",
      "question": "What tags should be matched to show this option?"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"
  },
  {
    "path": [
      "mappings",
      "then"
    ],
    "required": true,
    "hints": {
      "typehint": "rendered",
      "question": "What corresponding text should be shown?"
    },
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "Shown if the `if` is fulfilled"
  },
  {
    "path": [
      "mappings",
      "icon"
    ],
    "required": false,
    "hints": {
      "typehint": "icon",
      "question": "What icon should be shown next to this mapping?",
      "ifunset": "Show no icon"
    },
    "type": [
      {
        "type": "object",
        "properties": {
          "path": {
            "description": "The path to the  icon\nType: icon",
            "type": "string"
          },
          "class": {
            "description": "Size of the image",
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"
  },
  {
    "path": [
      "mappings",
      "icon",
      "path"
    ],
    "required": true,
    "hints": {
      "typehint": "icon"
    },
    "type": "string",
    "description": "The path to the  icon"
  },
  {
    "path": [
      "mappings",
      "icon",
      "class"
    ],
    "required": false,
    "hints": {},
    "type": "string",
    "description": "Size of the image"
  },
  {
    "path": [
      "mappings",
      "hideInAnswer"
    ],
    "required": false,
    "hints": {
      "typehint": "tag",
      "question": "Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",
      "iftrue": "Never show this mapping as option to pick",
      "ifunset": "Always show this mapping as option to pick"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": [
          "string",
          "boolean"
        ]
      }
    ],
    "description": "In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).\nIn the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.\nIn this case, one of the mappings can be hiden by setting this flag.\nTo demonstrate an example making a default assumption:\nmappings: [\n {\n     if: \"access=\", -- no access tag present, we assume accessible\n     then: \"Accessible to the general public\",\n     hideInAnswer: true\n },\n {\n     if: \"access=yes\",\n     then: \"Accessible to the general public\", -- the user selected this, we add that to OSM\n },\n {\n     if: \"access=no\",\n     then: \"Not accessible to the public\"\n }\n]\nFor example, for an operator, we have `operator=Agentschap Natuur en Bos`, which is often abbreviated to `operator=ANB`.\nThen, we would add two mappings:\n{\n    if: \"operator=Agentschap Natuur en Bos\" -- the non-abbreviated version which should be uploaded\n    then: \"Maintained by Agentschap Natuur en Bos\"\n},\n{\n    if: \"operator=ANB\", -- we don't want to upload abbreviations\n    then: \"Maintained by Agentschap Natuur en Bos\"\n    hideInAnswer: true\n}\nHide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.\nKeep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch\ne.g., for toilets: if \"wheelchair=no\", we know there is no wheelchair dedicated room.\nFor the location of the changing table, the option \"in the wheelchair accessible toilet is weird\", so we write:\n{\n    \"question\": \"Where is the changing table located?\"\n    \"mappings\": [\n        {\"if\":\"changing_table:location=female\",\"then\":\"In the female restroom\"},\n       {\"if\":\"changing_table:location=male\",\"then\":\"In the male restroom\"},\n       {\"if\":\"changing_table:location=wheelchair\",\"then\":\"In the wheelchair accessible restroom\", \"hideInAnswer\": \"wheelchair=no\"},\n    ]\n}\nAlso have a look for the meta-tags\n{\n    if: \"operator=Agentschap Natuur en Bos\",\n    then: \"Maintained by Agentschap Natuur en Bos\",\n    hideInAnswer: \"_country!=be\"\n}"
  },
  {
    "path": [
      "mappings",
      "hideInAnswer",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "hideInAnswer",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "alsoShowIf"
    ],
    "required": false,
    "hints": {
      "question": "In what other cases should this item be rendered?",
      "ifunset": "No other cases when this text is shown"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "Also show this 'then'-option if the feature matches these tags.\nIdeal for outdated tags or default assumptions. The tags from this options will <b>not</b> be set if the option is chosen!"
  },
  {
    "path": [
      "mappings",
      "alsoShowIf",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "alsoShowIf",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "ifnot"
    ],
    "required": false,
    "hints": {
      "question": "What tags should be applied if this mapping is _not_ chosen?",
      "ifunset": "Do not apply a tag if a different mapping is chosen."
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"
  },
  {
    "path": [
      "mappings",
      "ifnot",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "ifnot",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "addExtraTags"
    ],
    "required": false,
    "hints": {
      "typehint": "simple_tag",
      "question": "What extra tags should be added to the object if this object is chosen?"
    },
    "type": "array",
    "description": "If chosen as answer, these tags will be applied onto the object, together with the tags from the `if`.\nNote that if the contributor picks this mapping, saves and then changes their mind and uses a different mapping,\nthe extraTags will reside.\nE.g. when picking `memorial:type=bench`, then `amenity=bench` will also be applied.\nIf someone later on changes the type to `memorial:statue`, `amenity=bench` will stay onto the object\n(which is the desired behaviour, see e.g. for https://www.openstreetmap.org/node/5620038478)\nUse 'ifNot' to explicitly remove an tag if this is important\nIf someone marks the question as 'unknown', the extra tags will not be erased\nNot compatible with multiAnswer.\nThis can be used e.g. to erase other keys which indicate the 'not' value:\n```json\n{\n    \"if\": \"crossing:marking=rainbow\",\n    \"then\": \"This is a rainbow crossing\",\n    \"addExtraTags\": [\"not:crossing:marking=\"]\n}\n```"
  },
  {
    "path": [
      "mappings",
      "searchTerms"
    ],
    "required": false,
    "hints": {
      "group": "hidden",
      "question": "If there are many options, what search terms match too?"
    },
    "type": "object",
    "description": "If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction\nSearchterms (per language) allow to easily find an option if there are many options"
  },
  {
    "path": [
      "mappings",
      "priorityIf"
    ],
    "required": false,
    "hints": {
      "group": "hidden"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden\nUse this sparingly"
  },
  {
    "path": [
      "mappings",
      "priorityIf",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "priorityIf",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "mappings",
      "#"
    ],
    "required": false,
    "hints": {
      "group": "hidden"
    },
    "type": "string",
    "description": "Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"
  },
  {
    "path": [
      "multiAnswer"
    ],
    "required": false,
    "hints": {
      "question": "Should a contributor be allowed to select multiple mappings?",
      "iftrue": "allow to select multiple mappings (and show a freeform-value as list if ';'-separated)",
      "iffalse": "only allow to select a single mapping",
      "ifunset": "only allow to select a single mapping"
    },
    "type": "boolean",
    "description": "If true, use checkboxes instead of radio buttons when asking the question."
  },
  {
    "path": [
      "freeform"
    ],
    "required": false,
    "hints": {},
    "type": "object",
    "description": "Allow freeform text input from the user"
  },
  {
    "path": [
      "freeform",
      "key"
    ],
    "required": false,
    "hints": {
      "question": "What is the name of the attribute that should be written to?",
      "ifunset": "do not offer a freeform textfield as answer option"
    },
    "type": "string",
    "description": "This is the OpenStreetMap-key that that value will be written to"
  },
  {
    "path": [
      "freeform",
      "type"
    ],
    "required": false,
    "hints": {
      "question": "What is the input type?",
      "ifunset": "use an unconstrained <b>string</b> as input (default)",
      "suggestions": [
        {
          "if": "value=string",
          "then": "<b>string</b> A simple piece of text which is at most 255 characters long"
        },
        {
          "if": "value=text",
          "then": "<b>text</b> A longer piece of text. Uses an textArea instead of a textField"
        },
        {
          "if": "value=date",
          "then": "<b>date</b> A date with date picker"
        },
        {
          "if": "value=nat",
          "then": "<b>nat</b> A  whole, positive number or zero"
        },
        {
          "if": "value=int",
          "then": "<b>int</b> A whole number, either positive, negative or zero"
        },
        {
          "if": "value=distance",
          "then": "<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `[\"21\", \"map,photo\"]"
        },
        {
          "if": "value=direction",
          "then": "<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."
        },
        {
          "if": "value=wikidata",
          "then": "<b>wikidata</b> A wikidata identifier, e.g. Q42."
        },
        {
          "if": "value=pnat",
          "then": "<b>pnat</b> A strict positive number"
        },
        {
          "if": "value=float",
          "then": "<b>float</b> A decimal number"
        },
        {
          "if": "value=pfloat",
          "then": "<b>pfloat</b> A positive decimal number or zero"
        },
        {
          "if": "value=email",
          "then": "<b>email</b> An email adress"
        },
        {
          "if": "value=url",
          "then": "<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"
        },
        {
          "if": "value=phone",
          "then": "<b>phone</b> A phone number"
        },
        {
          "if": "value=opening_hours",
          "then": "<b>opening_hours</b> Has extra elements to easily input when a POI is opened."
        },
        {
          "if": "value=color",
          "then": "<b>color</b> Shows a color picker"
        },
        {
          "if": "value=icon",
          "then": "<b>icon</b> Makes sure that a valid .svg-path is added"
        },
        {
          "if": "value=fediverse",
          "then": "<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"
        },
        {
          "if": "value=id",
          "then": "<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"
        },
        {
          "if": "value=slope",
          "then": "<b>slope</b> Validates that the slope is a valid number.The accompanying input element uses the gyroscope and the compass to determine the correct incline. The sign of the incline will be set automatically. The bearing of the way is compared to the bearing of the compass, as such, the device knows if it is measuring in the forward or backward direction."
        },
        {
          "if": "value=velopark",
          "then": "<b>velopark</b> A special URL-validator that checks the domain name and rewrites to the correct velopark format."
        },
        {
          "if": "value=nsi",
          "then": "<b>nsi</b> Gives a list of possible suggestions for a brand or operator tag. "
        },
        {
          "if": "value=currency",
          "then": "<b>currency</b> Validates monetary amounts"
        },
        {
          "if": "value=regex",
          "then": "<b>regex</b> Validates a regex"
        }
      ]
    },
    "type": "string",
    "description": "The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...\nSee Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values"
  },
  {
    "path": [
      "freeform",
      "placeholder"
    ],
    "required": false,
    "hints": {
      "typehint": "translation",
      "group": "expert",
      "question": "What placeholder text should be shown in the input-element if there is no input?",
      "ifunset": "No specific placeholder is set, show the type of the textfield"
    },
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "A (translated) text that is shown (as gray text) within the textfield"
  },
  {
    "path": [
      "freeform",
      "addExtraTags"
    ],
    "required": false,
    "hints": {
      "group": "expert"
    },
    "type": "array",
    "description": "If a value is added with the textfield, these extra tag is addded.\nUseful to add a 'fixme=freeform textfield used - to be checked'"
  },
  {
    "path": [
      "freeform",
      "inline"
    ],
    "required": false,
    "hints": {
      "group": "expert",
      "question": "Show the freeform as box within the question?",
      "iftrue": "show the freeform input field as a small field within the question",
      "ifunset": "show the freeform input field full-width"
    },
    "type": "boolean",
    "description": "Instead of showing a full-width text field, the text field will be shown within the rendering of the question.\nThis combines badly with special input elements, as it'll distort the layout."
  },
  {
    "path": [
      "freeform",
      "default"
    ],
    "required": false,
    "hints": {
      "group": "expert",
      "question": "What value should be entered in the text field if no value is set?",
      "ifunset": "do not prefill the textfield"
    },
    "type": "string",
    "description": "This can help people to quickly enter the most common option"
  },
  {
    "path": [
      "freeform",
      "invalidValues"
    ],
    "required": false,
    "hints": {
      "group": "expert",
      "question": "What values of the freeform key should be interpreted as 'unknown'?",
      "ifunset": "The question will be considered answered if any value is set for the key"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"
  },
  {
    "path": [
      "freeform",
      "invalidValues",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "freeform",
      "invalidValues",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "freeform",
      "postfixDistinguished"
    ],
    "required": false,
    "hints": {
      "group": "expert",
      "question": "If this key shared and distinguished by a postfix, what is the postfix?",
      "ifunset": "Don't distinguish by postfix"
    },
    "type": "string",
    "description": "This option is used specifically for `charge`, where the cost is indicated with `/item`.\nFor example, a vending machine might sell `bicycle_tube`.\nSetting this value to `bicycle_tube`, then answering this question will set `charge= €XX/bicycle_tube`.\nIf charge did already contain another value, e.g. `charge= €YY/some_item; €ZZ/other_item`, then `€XX/bicycle_tube`will be added.\nNote: those values are sorted alphabetically\nNote: no need to add the `/`"
  },
  {
    "path": [
      "freeform",
      "helperArgs"
    ],
    "required": true,
    "hints": {
      "group": "hidden"
    },
    "description": "Extra arguments to configure the input element"
  },
  {
    "path": [
      "question"
    ],
    "required": false,
    "hints": {
      "question": "What question should be shown to the contributor?",
      "ifunset": "This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"
    },
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."
  },
  {
    "path": [
      "questionHint"
    ],
    "required": false,
    "hints": {
      "question": "Should some extra information be shown to the contributor, alongside the question?",
      "ifunset": "No extra hint is given"
    },
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "This hint is shown in subtle text under the question.\nThis can give some extra information on what the answer should ook like"
  },
  {
    "path": [
      "editButtonAriaLabel"
    ],
    "required": false,
    "hints": {},
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "When using a screenreader and selecting the 'edit' button, the current rendered value is read aloud in normal circumstances.\nIn some rare cases, this is not desirable. For example, if the rendered value is a link to a website, this link can be selected (and will be read aloud).\nIf the user presses _tab_ again, they'll select the button and have the link read aloud a second time."
  },
  {
    "path": [
      "labels"
    ],
    "required": false,
    "hints": {
      "question": "What labels should be applied on this tagRendering?"
    },
    "type": "array",
    "description": "A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer\nSpecial values:\n- \"hidden\": do not show this tagRendering. Useful in it is used by e.g. an accordion\n- \"description\": this label is a description used in the search"
  },
  {
    "path": [
      "onSoftDelete"
    ],
    "required": false,
    "hints": {
      "question": "What tags should be applied when the object is soft-deleted?"
    },
    "type": "array",
    "description": ""
  },
  {
    "path": [
      "render"
    ],
    "required": false,
    "hints": {
      "typehint": "rendered",
      "question": "What text should be rendered?",
      "ifunset": "No text is shown if no predefined options match."
    },
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "object",
        "properties": {
          "special": {
            "allOf": [
              {
                "$ref": "#/definitions/Record<string,string|Record<string,string>>"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          }
        },
        "required": [
          "special"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"
  },
  {
    "path": [
      "icon"
    ],
    "required": false,
    "hints": {
      "typehint": "icon",
      "question": "what icon should be shown next to the 'render' value?",
      "ifunset": "No additional icon is shown next to the always shown text"
    },
    "type": [
      {
        "type": "object",
        "properties": {
          "path": {
            "description": "The path to the icon\nType: icon",
            "type": "string"
          },
          "class": {
            "description": "A hint to mapcomplete on how to render this icon within the mapping.\nThis is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)",
            "type": "string"
          }
        },
        "required": [
          "path"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "An icon shown next to the rendering; typically shown pretty small\nThis is only shown next to the \"render\" value"
  },
  {
    "path": [
      "icon",
      "path"
    ],
    "required": true,
    "hints": {
      "typehint": "icon"
    },
    "type": "string",
    "description": "The path to the icon"
  },
  {
    "path": [
      "icon",
      "class"
    ],
    "required": false,
    "hints": {},
    "type": "string",
    "description": "A hint to mapcomplete on how to render this icon within the mapping.\nThis is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)"
  },
  {
    "path": [
      "condition"
    ],
    "required": false,
    "hints": {
      "typehint": "tag",
      "question": "When should this item be shown?",
      "ifunset": "No specific condition set; always show this tagRendering or show this question if unknown"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as `condition`.\nThis is useful to ask a follow-up question.\nFor example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.\nThis can be done by adding `\"condition\": \"changing_table=yes\"`\nA full example would be:\n```json\n    {\n      \"question\": \"Where is the changing table located?\",\n      \"render\": \"The changing table is located at {changing_table:location}\",\n      \"condition\": \"changing_table=yes\",\n      \"freeform\": {\n        \"key\": \"changing_table:location\",\n        \"inline\": true\n      },\n      \"mappings\": [\n        {\n          \"then\": \"The changing table is in the toilet for women.\",\n          \"if\": \"changing_table:location=female_toilet\"\n        },\n        {\n          \"then\": \"The changing table is in the toilet for men.\",\n          \"if\": \"changing_table:location=male_toilet\"\n        },\n        {\n          \"if\": \"changing_table:location=wheelchair_toilet\",\n          \"then\": \"The changing table is in the toilet for wheelchair users.\",\n        },\n        {\n          \"if\": \"changing_table:location=dedicated_room\",\n          \"then\": \"The changing table is in a dedicated room. \",\n        }\n      ],\n      \"id\": \"toilet-changing_table:location\"\n    },\n```"
  },
  {
    "path": [
      "condition",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "condition",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "metacondition"
    ],
    "required": false,
    "hints": {
      "typehint": "tag",
      "question": "When should this item be shown (including special conditions)?",
      "ifunset": "No specific metacondition set which is evaluated against the <i>usersettings/application state</i>; always show this tagRendering or show this question if unknown"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "$ref": "#/definitions/{or:TagConfigJson[];}"
      },
      {
        "type": "string"
      }
    ],
    "description": "If set, this tag will be evaluated against the _usersettings/application state_ table.\nEnable 'show debug info' in user settings to see available options (at the settings-tab).\nNote that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_"
  },
  {
    "path": [
      "metacondition",
      "and"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "metacondition",
      "or"
    ],
    "required": false,
    "hints": {
      "typehint": "tag"
    },
    "type": [
      {
        "$ref": "#/definitions/{and:TagConfigJson[];}"
      },
      {
        "type": "object",
        "properties": {
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TagConfigJson"
            }
          }
        },
        "required": [
          "or"
        ]
      },
      {
        "type": "string"
      }
    ],
    "description": "The main representation of Tags.\nSee https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation"
  },
  {
    "path": [
      "description"
    ],
    "required": false,
    "hints": {},
    "type": [
      {
        "$ref": "#/definitions/Record<string,string>"
      },
      {
        "type": "string"
      }
    ],
    "description": "A human-readable text explaining what this tagRendering does.\nMostly used for the shared tagrenderings"
  },
  {
    "path": [
      "classes"
    ],
    "required": false,
    "hints": {
      "question": "What css-classes should be applied to showing this attribute?"
    },
    "type": "string",
    "description": "A list of css-classes to apply to the entire tagRendering.\nThese classes are applied in 'answer'-mode, not in question mode\nThis is only for advanced users.\nValues are split on ` `  (space)"
  },
  {
    "path": [
      "filter"
    ],
    "required": false,
    "hints": {},
    "type": [
      {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      {
        "enum": [
          true
        ],
        "type": "boolean"
      }
    ],
    "description": "This tagRendering can introduce this builtin filter"
  }
]